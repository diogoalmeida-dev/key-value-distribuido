networks:
  backend:

services:
  # ---------- REDIS (+ SENTINEL) ----------
  redis-master:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    volumes: [redis-data:/data]
    networks: [backend]

  redis-replica-1:
    image: redis:7-alpine
    command: ["redis-server",
              "--replicaof", "redis-master", "6379",
              "--appendonly", "yes"]
    depends_on: [redis-master]
    networks: [backend]
    restart: always

  redis-replica-2:
    image: redis:7-alpine
    command: ["redis-server",
              "--replicaof", "redis-master", "6379",
              "--appendonly", "yes"]
    depends_on: [redis-master]
    networks: [backend]
    restart: always

  # ---------- SENTINELS ----------
  sentinel-1: &sentinel
    image: redis:7-alpine
    entrypoint: >
      /bin/sh -c '
        echo "[sentinel] à espera de redis-master:6379 …";
        until redis-cli -h redis-master -p 6379 ping 2>/dev/null | grep -q PONG ; do
          sleep 1;
        done;
        echo "[sentinel] master OK – a iniciar o Sentinel";
        exec redis-server /etc/redis/sentinel.conf --sentinel
      '
    volumes:
      - ./sentinel/sentinel.conf:/etc/redis/sentinel.conf:rw

    networks: [backend]
    restart: always

  sentinel-2:
    <<: *sentinel
  sentinel-3:
    <<: *sentinel

  # ---------- RABBITMQ ----------  
  rabbit-1:
    image: rabbitmq:3-management-alpine
    container_name: rabbit-1
    hostname: rabbit-1
    environment:
      RABBITMQ_ERLANG_COOKIE: "PLSNEED20"
      RABBITMQ_NODENAME: "rabbit@rabbit-1"
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbit1-data:/var/lib/rabbitmq
    networks: [backend]

  rabbit-2:
    image: rabbitmq:3-management-alpine
    container_name: rabbit-2
    hostname: rabbit-2
    environment:
      RABBITMQ_ERLANG_COOKIE: "PLSNEED20"
      RABBITMQ_NODENAME: "rabbit@rabbit-2"
    depends_on:
      - rabbit-1
    volumes:
      - rabbit2-data:/var/lib/rabbitmq
    networks: [backend]
    entrypoint: >
      /bin/sh -c "
        # 1) Esperar pelo líder
        until rabbitmqctl -n rabbit@rabbit-1 status; do sleep 1; done;
        # 2) Parar app local
        rabbitmqctl -n rabbit@rabbit-2 stop_app;
        # 3) Juntar ao cluster
        rabbitmqctl -n rabbit@rabbit-2 join_cluster rabbit@rabbit-1;
        # 4) Reiniciar app
        rabbitmqctl -n rabbit@rabbit-2 start_app;
        # 5) Iniciar servidor
        rabbitmq-server
      "

  # ---------- COCKROACHDB CLUSTER ----------  # ---------- COCKROACHDB CLUSTER ----------
  cockroach-1:
    image: cockroachdb/cockroach:v23.1.5
    hostname: cockroach-1
    command:
      - start
      - --insecure
      - --join=cockroach-1:26257,cockroach-2:26257,cockroach-3:26257
      - --store=/cockroach/cockroach-data
      - --listen-addr=0.0.0.0:26257
      - --http-addr=0.0.0.0:8080
      - --advertise-addr=cockroach-1:26257
    volumes:
      - cockroach-data-1:/cockroach/cockroach-data
    networks: [backend]
    ports:
      - "26257:26257"
      - "8080:8080"
    restart: always

  cockroach-2:
    image: cockroachdb/cockroach:v23.1.5
    hostname: cockroach-2
    command:
      - start
      - --insecure
      - --join=cockroach-1:26257,cockroach-2:26257,cockroach-3:26257
      - --store=/cockroach/cockroach-data
      - --listen-addr=0.0.0.0:26257
      - --advertise-addr=cockroach-2:26257
    volumes:
      - cockroach-data-2:/cockroach/cockroach-data
    networks: [backend]
    restart: always

  cockroach-3:
    image: cockroachdb/cockroach:v23.1.5
    hostname: cockroach-3
    command:
      - start
      - --insecure
      - --join=cockroach-1:26257,cockroach-2:26257,cockroach-3:26257
      - --store=/cockroach/cockroach-data
      - --listen-addr=0.0.0.0:26257
      - --advertise-addr=cockroach-3:26257
    volumes:
      - cockroach-data-3:/cockroach/cockroach-data
    networks: [backend]
    restart: always

  cockroach-init:
    image: cockroachdb/cockroach:v23.1.5
    entrypoint:
      - /bin/sh
      - -ec
      - |
        # espera pelos nós
        for i in $(seq 1 10); do
          cockroach node status --insecure --host=cockroach-1:26257 && break || sleep 2
        done
        # inicializa o cluster
        cockroach init --insecure --host=cockroach-1:26257
    depends_on:
      - cockroach-1
      - cockroach-2
      - cockroach-3
    networks: [backend]
    restart: "no"

  # ---------- STORAGE NODE ----------
  node1:
    build: ./backend/storage_node
    command: ["uvicorn", "app:app", "--host", "0.0.0.0", "--port", "8000"]
    environment:
      REDIS_SENTINELS: sentinel-1:26379,sentinel-2:26379,sentinel-3:26379
      CACHE_TTL: "300"
      COCKROACH_URL: cockroachdb://root@cockroach-1:26257/defaultdb?sslmode=disable
    expose: ["8000"]
    depends_on:
      - sentinel-1
      - cockroach-1
    networks: [backend]
    restart: always

  # ---------- WORKER ----------
  worker:
    build: ./backend/storage_node
    command: ["python", "worker.py"]
    environment:
      REDIS_SENTINELS: sentinel-1:26379,sentinel-2:26379,sentinel-3:26379
      CACHE_TTL: "300"
      COCKROACH_URL: cockroachdb://root@cockroach-1:26257/defaultdb?sslmode=disable
      RABBITMQ_URL: amqp://guest:guest@rabbit-1:5672/
      QUEUE_NAME: kv_requests
    depends_on:
      - rabbit-1
      - sentinel-1
      - cockroach-1
    networks: [backend]
    restart: on-failure

  # ---------- ENVOY PROXY ----------
  envoy:
    build: { context: ./backend/envoy, dockerfile: Dockerfile }
    volumes:
      - ./envoy.yaml:/etc/envoy/envoy.yaml:ro
    ports:
      - "10000:8080"
      - "9901:9901"
    depends_on:
      - node1
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9901/server_info"]
      interval: 10s
      retries: 3
    networks: [backend]
    restart: always

  # ---------- NGINX ----------
  nginx:
    build: { context: ./backend/nginx }
    ports: ["80:80"]
    depends_on:
      - envoy
    networks: [backend]
    restart: always

  # ---------- API GATEWAY ----------
  gateway:
    build: ./backend/api_gateway
    environment:
      RABBITMQ_URL: amqp://guest:guest@rabbit-1:5672/
      NODE_URL: http://envoy:8080
    expose: ["8000"]
    depends_on:
      - node1
      - rabbit-1
    networks: [backend]
    restart: always

volumes:
  cockroach-data-1:
  cockroach-data-2:
  cockroach-data-3:
  redis-data:
  rabbit1-data:
  rabbit2-data:
