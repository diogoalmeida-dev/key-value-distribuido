static_resources:
  listeners:
    - name: http_listener
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 8080
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_http
                route_config:
                  name: local_route
                  virtual_hosts:
                    # ─────────  Tráfego EXTERNO  ─────────
                    - name: external_requests
                      domains: ["*"]
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            cluster: gateway_cluster
                            timeout: 5s

                    # ─────────  Tráfego INTERNO  ─────────
                    - name: internal_storage
                      domains: ["storage.internal"]
                      routes:
                        # rota para GET /store
                        - match:
                            prefix: "/store"
                          route:
                            cluster: storage_cluster
                            timeout: 5s

                        # rota para GET /store/all
                        - match:
                            prefix: "/store/all"
                          route:
                            cluster: storage_cluster
                            timeout: 5s

                        # nova rota para GET /redis/keys
                        - match:
                            prefix: "/redis/keys"
                          route:
                            cluster: storage_cluster
                            timeout: 5s

                        # catch-all interno (opcional)
                        - match:
                            prefix: "/"
                          route:
                            cluster: storage_cluster
                            timeout: 5s

                http_filters:
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
                access_log:
                  - name: envoy.access_loggers.file
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                      path: /dev/stdout
                      log_format:
                        text_format: |
                          [%START_TIME%] "%REQ(:METHOD)% %REQ(X-ENVOY-ORIGINAL-PATH?:PATH)% %PROTOCOL%" %RESPONSE_CODE% - %RESPONSE_DURATION% ms "%REQ(HOST)%" %UPSTREAM_HOST%

  clusters:
    # ---------- API Gateway ----------
    - name: gateway_cluster
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      connect_timeout: 0.25s
      dns_lookup_family: V4_ONLY
      common_lb_config:
        healthy_panic_threshold:
          value: 0
      load_assignment:
        cluster_name: gateway_cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: gateway
                      port_value: 8000
    # ---------- Storage Nodes ----------
    - name: storage_cluster
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      connect_timeout: 0.25s
      dns_lookup_family: V4_ONLY
      common_lb_config:
        healthy_panic_threshold:
          value: 0          # evita panic mode quando há poucos nós saudáveis
      load_assignment:
        cluster_name: storage_cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address: { address: node1, port_value: 8000 }
              - endpoint:
                  address:
                    socket_address: { address: node2, port_value: 8000 }
              - endpoint:
                  address:
                    socket_address: { address: node3, port_value: 8000 }
      health_checks:
        - timeout: 3s
          interval: 5s
          healthy_threshold: 2
          unhealthy_threshold: 2
          http_health_check:
            path: /health
            expected_statuses: [{ start: 200, end: 299 }]

admin:
  access_log_path: /dev/stdout
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }
